// Generated by view binder compiler. Do not edit!
package com.example.todoapplicationmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.todoapplicationmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEditTaskBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonSave;

  @NonNull
  public final Button buttonSelectDueDate;

  @NonNull
  public final EditText editTextTaskTitle;

  @NonNull
  public final TextView textViewDueDate;

  private ActivityEditTaskBinding(@NonNull LinearLayout rootView, @NonNull Button buttonSave,
      @NonNull Button buttonSelectDueDate, @NonNull EditText editTextTaskTitle,
      @NonNull TextView textViewDueDate) {
    this.rootView = rootView;
    this.buttonSave = buttonSave;
    this.buttonSelectDueDate = buttonSelectDueDate;
    this.editTextTaskTitle = editTextTaskTitle;
    this.textViewDueDate = textViewDueDate;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEditTaskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEditTaskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_edit_task, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEditTaskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonSave;
      Button buttonSave = ViewBindings.findChildViewById(rootView, id);
      if (buttonSave == null) {
        break missingId;
      }

      id = R.id.buttonSelectDueDate;
      Button buttonSelectDueDate = ViewBindings.findChildViewById(rootView, id);
      if (buttonSelectDueDate == null) {
        break missingId;
      }

      id = R.id.editTextTaskTitle;
      EditText editTextTaskTitle = ViewBindings.findChildViewById(rootView, id);
      if (editTextTaskTitle == null) {
        break missingId;
      }

      id = R.id.textViewDueDate;
      TextView textViewDueDate = ViewBindings.findChildViewById(rootView, id);
      if (textViewDueDate == null) {
        break missingId;
      }

      return new ActivityEditTaskBinding((LinearLayout) rootView, buttonSave, buttonSelectDueDate,
          editTextTaskTitle, textViewDueDate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
